(relative-include "src/sockets.h")

(doc Socket "is a simple wrapper around C sockets for Carp.

## Installation

```
(load \"https://github.com/carpentry-org/sockets@0.0.1\")
```

## Usage

Setting up a socket can be done through `setup-server` and
`setup-client` or through the macros `with-server` and
`with-client`.

```clojure
(let [sock (Socket.setup-server \"127.0.0.1\" 80)]
  ; ... work with sock
  )

(let [sock (Socket.setup-client \"127.0.0.1\" 80)]
  ; ...
  )

(Socket.with-server sock \"127.0.0.1\" 80
  ; use sock as above
  )

(Socket.with-client sock \"127.0.0.1\" 80
  ; use sock as above
  )
```

After checking that they are valid using `Socket.valid?`, client sockets can
`send` and `read` right away, whereas server sockets have to `listen` and
`accept` first. Just like in C!

Alternatively, you can also use the macro `with-connection` in the server, like
so:

```clojure
(Socket.with-server server \"127.0.0.1\" 80
  (Socket.with-connection &server client
    (send &client \"nice to meet you!\")
  )
)
```

If you want a server that accepts connections forever, use `while-connection`:

```clojure
(Socket.with-server server \"127.0.0.1\" 80
  (Socket.while-connection &server client
    (send &client \"nice to meet you!\")
  )
)
```

This will never terminate, unless interrupted by the user or failure.")
(register-type Socket)
(defmodule Socket
  (doc buf-size "is the size of the socketsâ€™ read buffer.")
  (register buf-size Int)
  (doc setup-client "setup a client socket.")
  (register setup-client (Fn [&String Int] Socket))
  (doc setup-client "setup a client socket to a host using a protocol.

Example:
```
(Socket.setup-client-for \"httpbin.org\" \"http\" 80)
```")
  (register setup-client-for (Fn [&String &String Int] Socket))
  (doc setup-server "setup a server socket.")
  (register setup-server (Fn [&String Int] Socket))
  (doc valid? "checks whether a socket is valid.")
  (register valid? (Fn [&Socket] Bool))
  (doc listen "listens on a socket for new connections.")
  (register listen (Fn [&Socket] ()))
  (doc accept "accepts new connections, returning a new socket.")
  (register accept (Fn [&Socket] Socket))
  (doc send "sends string data over a socket.")
  (register send (Fn [&Socket &String] ()))
  (doc send-bytes "sends binary data over a socket.")
  (register send-bytes (Fn [&Socket &(Array Byte)] ()))
  (doc read "reads string data over a socket.")
  (register read (Fn [&Socket] String))
  (doc read-bytes "reads binary data over a socket.")
  (register read-bytes (Fn [&Socket] (Array Byte)))
  (doc close "closes a socket.")
  (register close (Fn [Socket] ()))
  (register copy (Fn [&Socket] Socket))

  (doc with-client "create a client socket named `name`, connecting to `host`
and `port`, and then execute `forms`.

This functions closes the socket automatically at the end.")
  (defmacro with-client [name host port :rest forms]
    (list 'let (array name (list 'Socket.setup-client host port))
      (cons-last (list 'Socket.close name) (cons 'do forms))))

  (doc with-client-for "create a client socket named `name`, connecting to
`host` and `port` using protocol `proto`, and then execute `forms`.

This functions closes the socket automatically at the end.")
  (defmacro with-client-for [name host proto port :rest forms]
    (list 'let (array name (list 'Socket.setup-client-for host proto port))
      (cons-last (list 'Socket.close name) (cons 'do forms))))

  (doc with-server "create a server socket named `name`, connecting to `host`
and `port`, and then execute `forms`.

This functions closes the socket automatically at the end.")
  (defmacro with-server [name host port :rest forms]
    (list 'let (array name (list 'Socket.setup-server host port))
      (cons-last (list 'Socket.close name) (cons 'do forms))))

  (doc with-connection "create a connection socket from the server `from` to
a socket named `to`, and then execute `forms`.

This functions closes the socket automatically at the end.")
  (defmacro with-connection [from to :rest forms]
    (list 'do (list 'listen from)
      (list 'let (array to (list 'accept from))
        (cons-last (list 'Socket.close to) (cons 'do forms)))))

  (doc while-connection "create a connection socket from the server `from` to
a socket named `to`, and then execute `forms` forever.

This functions closes the socket automatically at the end.")
  (defmacro while-connection [from to :rest forms]
    (list 'do (list 'listen from)
      (list 'while true
        (list 'let (array to (list 'accept from))
          (cons-last (list 'Socket.close to) (cons 'do forms))))))
)
