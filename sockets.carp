(relative-include "src/sockets.h")

(register-type Socket)

(defmodule Socket
  (doc buf-size "is the size of the socketsâ€™ read buffer.")
  (register buf-size Int)
  (doc setup-client "setups a client socket.")
  (register setup-client (Fn [&String Int] Socket))
  (doc setup-client "setups a server socket.")
  (register setup-server (Fn [&String Int] Socket))
  (doc valid? "checks whether a socket is valid.")
  (register valid? (Fn [&Socket] Bool))
  (doc listen "listens on a socket for new connections.")
  (register listen (Fn [&Socket] ()))
  (doc accept "accepts new connections, returning a new socket.")
  (register accept (Fn [&Socket] Socket))
  (doc send "sends string data over a socket.")
  (register send (Fn [&Socket &String] ()))
  (doc send-bytes "sends binary data over a socket.")
  (register send-bytes (Fn [&Socket &(Array Byte)] ()))
  (doc read "reads string data over a socket.")
  (register read (Fn [&Socket] String))
  (doc read-bytes "reads binary data over a socket.")
  (register read-bytes (Fn [&Socket] (Array Byte)))
  (doc close "closes a socket.")
  (register close (Fn [Socket] ()))

  (defmacro with-client [name host port :rest forms]
    (list 'let (array name (list 'Socket.setup-client host port))
      (cons-last (list 'Socket.close name) (cons 'do forms))))

  (defmacro with-server [name host port :rest forms]
    (list 'let (array name (list 'Socket.setup-server host port))
      (cons-last (list 'Socket.close name) (cons 'do forms))))

  (defmacro with-connection [from to :rest forms]
    (list 'do (list 'listen from)
      (list 'let (array to (list 'accept from))
        (cons-last (list 'Socket.close to) (cons 'do forms)))))

  (defmacro while-connection [from to :rest forms]
    (list 'do (list 'listen from)
      (list 'while true
        (list 'let (array to (list 'accept from))
          (cons-last (list 'Socket.close to) (cons 'do forms))))))
)
